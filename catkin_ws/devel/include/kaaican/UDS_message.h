// Generated by gencpp from file kaaican/UDS_message.msg
// DO NOT EDIT!


#ifndef KAAICAN_MESSAGE_UDS_MESSAGE_H
#define KAAICAN_MESSAGE_UDS_MESSAGE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kaaican
{
template <class ContainerAllocator>
struct UDS_message_
{
  typedef UDS_message_<ContainerAllocator> Type;

  UDS_message_()
    : UDS_count(0)
    , gap(0)
    , OBD_RPM(0)
    , OBD_speed(0)
    , Vehicle_speed_1(0)
    , Vehicle_speed_2(0)
    , Accleartor_position(0)
    , Driver_setting_target_speed(0)
    , Distance_to_target(0)
    , Relative_speed_to_target(0)
    , Absolute_steering_angle(0)
    , Steering_wheel_angle_sensor(0)  {
    }
  UDS_message_(const ContainerAllocator& _alloc)
    : UDS_count(0)
    , gap(0)
    , OBD_RPM(0)
    , OBD_speed(0)
    , Vehicle_speed_1(0)
    , Vehicle_speed_2(0)
    , Accleartor_position(0)
    , Driver_setting_target_speed(0)
    , Distance_to_target(0)
    , Relative_speed_to_target(0)
    , Absolute_steering_angle(0)
    , Steering_wheel_angle_sensor(0)  {
  (void)_alloc;
    }



   typedef uint32_t _UDS_count_type;
  _UDS_count_type UDS_count;

   typedef uint32_t _gap_type;
  _gap_type gap;

   typedef uint32_t _OBD_RPM_type;
  _OBD_RPM_type OBD_RPM;

   typedef uint32_t _OBD_speed_type;
  _OBD_speed_type OBD_speed;

   typedef uint32_t _Vehicle_speed_1_type;
  _Vehicle_speed_1_type Vehicle_speed_1;

   typedef uint32_t _Vehicle_speed_2_type;
  _Vehicle_speed_2_type Vehicle_speed_2;

   typedef uint32_t _Accleartor_position_type;
  _Accleartor_position_type Accleartor_position;

   typedef uint32_t _Driver_setting_target_speed_type;
  _Driver_setting_target_speed_type Driver_setting_target_speed;

   typedef uint32_t _Distance_to_target_type;
  _Distance_to_target_type Distance_to_target;

   typedef uint32_t _Relative_speed_to_target_type;
  _Relative_speed_to_target_type Relative_speed_to_target;

   typedef uint32_t _Absolute_steering_angle_type;
  _Absolute_steering_angle_type Absolute_steering_angle;

   typedef uint32_t _Steering_wheel_angle_sensor_type;
  _Steering_wheel_angle_sensor_type Steering_wheel_angle_sensor;





  typedef boost::shared_ptr< ::kaaican::UDS_message_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kaaican::UDS_message_<ContainerAllocator> const> ConstPtr;

}; // struct UDS_message_

typedef ::kaaican::UDS_message_<std::allocator<void> > UDS_message;

typedef boost::shared_ptr< ::kaaican::UDS_message > UDS_messagePtr;
typedef boost::shared_ptr< ::kaaican::UDS_message const> UDS_messageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kaaican::UDS_message_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kaaican::UDS_message_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kaaican::UDS_message_<ContainerAllocator1> & lhs, const ::kaaican::UDS_message_<ContainerAllocator2> & rhs)
{
  return lhs.UDS_count == rhs.UDS_count &&
    lhs.gap == rhs.gap &&
    lhs.OBD_RPM == rhs.OBD_RPM &&
    lhs.OBD_speed == rhs.OBD_speed &&
    lhs.Vehicle_speed_1 == rhs.Vehicle_speed_1 &&
    lhs.Vehicle_speed_2 == rhs.Vehicle_speed_2 &&
    lhs.Accleartor_position == rhs.Accleartor_position &&
    lhs.Driver_setting_target_speed == rhs.Driver_setting_target_speed &&
    lhs.Distance_to_target == rhs.Distance_to_target &&
    lhs.Relative_speed_to_target == rhs.Relative_speed_to_target &&
    lhs.Absolute_steering_angle == rhs.Absolute_steering_angle &&
    lhs.Steering_wheel_angle_sensor == rhs.Steering_wheel_angle_sensor;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kaaican::UDS_message_<ContainerAllocator1> & lhs, const ::kaaican::UDS_message_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kaaican

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kaaican::UDS_message_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kaaican::UDS_message_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kaaican::UDS_message_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kaaican::UDS_message_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kaaican::UDS_message_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kaaican::UDS_message_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kaaican::UDS_message_<ContainerAllocator> >
{
  static const char* value()
  {
    return "39f1bb4c2234cc4366a498f84a6e6abf";
  }

  static const char* value(const ::kaaican::UDS_message_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x39f1bb4c2234cc43ULL;
  static const uint64_t static_value2 = 0x66a498f84a6e6abfULL;
};

template<class ContainerAllocator>
struct DataType< ::kaaican::UDS_message_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kaaican/UDS_message";
  }

  static const char* value(const ::kaaican::UDS_message_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kaaican::UDS_message_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 UDS_count\n"
"uint32 gap\n"
"uint32 OBD_RPM\n"
"uint32 OBD_speed\n"
"uint32 Vehicle_speed_1\n"
"uint32 Vehicle_speed_2\n"
"uint32 Accleartor_position\n"
"uint32 Driver_setting_target_speed\n"
"uint32 Distance_to_target\n"
"uint32 Relative_speed_to_target\n"
"uint32 Absolute_steering_angle\n"
"uint32 Steering_wheel_angle_sensor\n"
"\n"
"\n"
;
  }

  static const char* value(const ::kaaican::UDS_message_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kaaican::UDS_message_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.UDS_count);
      stream.next(m.gap);
      stream.next(m.OBD_RPM);
      stream.next(m.OBD_speed);
      stream.next(m.Vehicle_speed_1);
      stream.next(m.Vehicle_speed_2);
      stream.next(m.Accleartor_position);
      stream.next(m.Driver_setting_target_speed);
      stream.next(m.Distance_to_target);
      stream.next(m.Relative_speed_to_target);
      stream.next(m.Absolute_steering_angle);
      stream.next(m.Steering_wheel_angle_sensor);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UDS_message_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kaaican::UDS_message_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kaaican::UDS_message_<ContainerAllocator>& v)
  {
    s << indent << "UDS_count: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.UDS_count);
    s << indent << "gap: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.gap);
    s << indent << "OBD_RPM: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.OBD_RPM);
    s << indent << "OBD_speed: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.OBD_speed);
    s << indent << "Vehicle_speed_1: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.Vehicle_speed_1);
    s << indent << "Vehicle_speed_2: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.Vehicle_speed_2);
    s << indent << "Accleartor_position: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.Accleartor_position);
    s << indent << "Driver_setting_target_speed: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.Driver_setting_target_speed);
    s << indent << "Distance_to_target: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.Distance_to_target);
    s << indent << "Relative_speed_to_target: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.Relative_speed_to_target);
    s << indent << "Absolute_steering_angle: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.Absolute_steering_angle);
    s << indent << "Steering_wheel_angle_sensor: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.Steering_wheel_angle_sensor);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KAAICAN_MESSAGE_UDS_MESSAGE_H
