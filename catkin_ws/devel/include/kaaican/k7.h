// Generated by gencpp from file kaaican/k7.msg
// DO NOT EDIT!


#ifndef KAAICAN_MESSAGE_K7_H
#define KAAICAN_MESSAGE_K7_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kaaican
{
template <class ContainerAllocator>
struct k7_
{
  typedef k7_<ContainerAllocator> Type;

  k7_()
    : msg_pub_cnt(0)
    , msg_sub_cnt(0)
    , Steering_angle_feedback(0)
    , APS_analog_feedback(0)
    , Tail_lamp(0)
    , Wiper(0)
    , Trun_lamp(0)
    , Mode(0)
    , Mode_feedback(0)
    , Error_status(0)
    , Desired_steering_angle(0)
    , status(0)
    , reserved(0)
    , TM_G_SEL_DISP(0)
    , accel(0)
    , mode_feedback(0)
    , ASM_state(0)
    , error_status(0)
    , Brake_actutator_position(0)
    , angle(0)
    , Brake_pedal(0)  {
    }
  k7_(const ContainerAllocator& _alloc)
    : msg_pub_cnt(0)
    , msg_sub_cnt(0)
    , Steering_angle_feedback(0)
    , APS_analog_feedback(0)
    , Tail_lamp(0)
    , Wiper(0)
    , Trun_lamp(0)
    , Mode(0)
    , Mode_feedback(0)
    , Error_status(0)
    , Desired_steering_angle(0)
    , status(0)
    , reserved(0)
    , TM_G_SEL_DISP(0)
    , accel(0)
    , mode_feedback(0)
    , ASM_state(0)
    , error_status(0)
    , Brake_actutator_position(0)
    , angle(0)
    , Brake_pedal(0)  {
  (void)_alloc;
    }



   typedef uint32_t _msg_pub_cnt_type;
  _msg_pub_cnt_type msg_pub_cnt;

   typedef uint32_t _msg_sub_cnt_type;
  _msg_sub_cnt_type msg_sub_cnt;

   typedef int16_t _Steering_angle_feedback_type;
  _Steering_angle_feedback_type Steering_angle_feedback;

   typedef uint16_t _APS_analog_feedback_type;
  _APS_analog_feedback_type APS_analog_feedback;

   typedef int16_t _Tail_lamp_type;
  _Tail_lamp_type Tail_lamp;

   typedef int16_t _Wiper_type;
  _Wiper_type Wiper;

   typedef int16_t _Trun_lamp_type;
  _Trun_lamp_type Trun_lamp;

   typedef int16_t _Mode_type;
  _Mode_type Mode;

   typedef int16_t _Mode_feedback_type;
  _Mode_feedback_type Mode_feedback;

   typedef int16_t _Error_status_type;
  _Error_status_type Error_status;

   typedef int16_t _Desired_steering_angle_type;
  _Desired_steering_angle_type Desired_steering_angle;

   typedef int16_t _status_type;
  _status_type status;

   typedef int16_t _reserved_type;
  _reserved_type reserved;

   typedef int16_t _TM_G_SEL_DISP_type;
  _TM_G_SEL_DISP_type TM_G_SEL_DISP;

   typedef int16_t _accel_type;
  _accel_type accel;

   typedef int16_t _mode_feedback_type;
  _mode_feedback_type mode_feedback;

   typedef int16_t _ASM_state_type;
  _ASM_state_type ASM_state;

   typedef int16_t _error_status_type;
  _error_status_type error_status;

   typedef int16_t _Brake_actutator_position_type;
  _Brake_actutator_position_type Brake_actutator_position;

   typedef int16_t _angle_type;
  _angle_type angle;

   typedef int16_t _Brake_pedal_type;
  _Brake_pedal_type Brake_pedal;





  typedef boost::shared_ptr< ::kaaican::k7_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kaaican::k7_<ContainerAllocator> const> ConstPtr;

}; // struct k7_

typedef ::kaaican::k7_<std::allocator<void> > k7;

typedef boost::shared_ptr< ::kaaican::k7 > k7Ptr;
typedef boost::shared_ptr< ::kaaican::k7 const> k7ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kaaican::k7_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kaaican::k7_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kaaican::k7_<ContainerAllocator1> & lhs, const ::kaaican::k7_<ContainerAllocator2> & rhs)
{
  return lhs.msg_pub_cnt == rhs.msg_pub_cnt &&
    lhs.msg_sub_cnt == rhs.msg_sub_cnt &&
    lhs.Steering_angle_feedback == rhs.Steering_angle_feedback &&
    lhs.APS_analog_feedback == rhs.APS_analog_feedback &&
    lhs.Tail_lamp == rhs.Tail_lamp &&
    lhs.Wiper == rhs.Wiper &&
    lhs.Trun_lamp == rhs.Trun_lamp &&
    lhs.Mode == rhs.Mode &&
    lhs.Mode_feedback == rhs.Mode_feedback &&
    lhs.Error_status == rhs.Error_status &&
    lhs.Desired_steering_angle == rhs.Desired_steering_angle &&
    lhs.status == rhs.status &&
    lhs.reserved == rhs.reserved &&
    lhs.TM_G_SEL_DISP == rhs.TM_G_SEL_DISP &&
    lhs.accel == rhs.accel &&
    lhs.mode_feedback == rhs.mode_feedback &&
    lhs.ASM_state == rhs.ASM_state &&
    lhs.error_status == rhs.error_status &&
    lhs.Brake_actutator_position == rhs.Brake_actutator_position &&
    lhs.angle == rhs.angle &&
    lhs.Brake_pedal == rhs.Brake_pedal;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kaaican::k7_<ContainerAllocator1> & lhs, const ::kaaican::k7_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kaaican

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kaaican::k7_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kaaican::k7_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kaaican::k7_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kaaican::k7_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kaaican::k7_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kaaican::k7_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kaaican::k7_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4b9ef8eeb0fa4356dd126ae0fcae5369";
  }

  static const char* value(const ::kaaican::k7_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4b9ef8eeb0fa4356ULL;
  static const uint64_t static_value2 = 0xdd126ae0fcae5369ULL;
};

template<class ContainerAllocator>
struct DataType< ::kaaican::k7_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kaaican/k7";
  }

  static const char* value(const ::kaaican::k7_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kaaican::k7_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 msg_pub_cnt\n"
"uint32 msg_sub_cnt\n"
"\n"
"int16 Steering_angle_feedback\n"
"uint16 APS_analog_feedback\n"
"int16 Tail_lamp\n"
"int16 Wiper\n"
"int16 Trun_lamp\n"
"int16 Mode\n"
"int16 Mode_feedback\n"
"int16 Error_status\n"
"int16 Desired_steering_angle\n"
"int16 status\n"
"int16 reserved\n"
"int16 TM_G_SEL_DISP\n"
"int16 accel\n"
"int16 mode_feedback\n"
"int16 ASM_state\n"
"int16 error_status\n"
"int16 Brake_actutator_position\n"
"int16 angle\n"
"int16 Brake_pedal\n"
"\n"
;
  }

  static const char* value(const ::kaaican::k7_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kaaican::k7_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.msg_pub_cnt);
      stream.next(m.msg_sub_cnt);
      stream.next(m.Steering_angle_feedback);
      stream.next(m.APS_analog_feedback);
      stream.next(m.Tail_lamp);
      stream.next(m.Wiper);
      stream.next(m.Trun_lamp);
      stream.next(m.Mode);
      stream.next(m.Mode_feedback);
      stream.next(m.Error_status);
      stream.next(m.Desired_steering_angle);
      stream.next(m.status);
      stream.next(m.reserved);
      stream.next(m.TM_G_SEL_DISP);
      stream.next(m.accel);
      stream.next(m.mode_feedback);
      stream.next(m.ASM_state);
      stream.next(m.error_status);
      stream.next(m.Brake_actutator_position);
      stream.next(m.angle);
      stream.next(m.Brake_pedal);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct k7_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kaaican::k7_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kaaican::k7_<ContainerAllocator>& v)
  {
    s << indent << "msg_pub_cnt: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.msg_pub_cnt);
    s << indent << "msg_sub_cnt: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.msg_sub_cnt);
    s << indent << "Steering_angle_feedback: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Steering_angle_feedback);
    s << indent << "APS_analog_feedback: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.APS_analog_feedback);
    s << indent << "Tail_lamp: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Tail_lamp);
    s << indent << "Wiper: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Wiper);
    s << indent << "Trun_lamp: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Trun_lamp);
    s << indent << "Mode: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Mode);
    s << indent << "Mode_feedback: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Mode_feedback);
    s << indent << "Error_status: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Error_status);
    s << indent << "Desired_steering_angle: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Desired_steering_angle);
    s << indent << "status: ";
    Printer<int16_t>::stream(s, indent + "  ", v.status);
    s << indent << "reserved: ";
    Printer<int16_t>::stream(s, indent + "  ", v.reserved);
    s << indent << "TM_G_SEL_DISP: ";
    Printer<int16_t>::stream(s, indent + "  ", v.TM_G_SEL_DISP);
    s << indent << "accel: ";
    Printer<int16_t>::stream(s, indent + "  ", v.accel);
    s << indent << "mode_feedback: ";
    Printer<int16_t>::stream(s, indent + "  ", v.mode_feedback);
    s << indent << "ASM_state: ";
    Printer<int16_t>::stream(s, indent + "  ", v.ASM_state);
    s << indent << "error_status: ";
    Printer<int16_t>::stream(s, indent + "  ", v.error_status);
    s << indent << "Brake_actutator_position: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Brake_actutator_position);
    s << indent << "angle: ";
    Printer<int16_t>::stream(s, indent + "  ", v.angle);
    s << indent << "Brake_pedal: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Brake_pedal);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KAAICAN_MESSAGE_K7_H
