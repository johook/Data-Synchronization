// Generated by gencpp from file kaaican/Niro.msg
// DO NOT EDIT!


#ifndef KAAICAN_MESSAGE_NIRO_H
#define KAAICAN_MESSAGE_NIRO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kaaican
{
template <class ContainerAllocator>
struct Niro_
{
  typedef Niro_<ContainerAllocator> Type;

  Niro_()
    : niro_can_message_number(0)
    , msg_count(0)
    , msg_status(0)
    , tosec(0.0)
    , header(0)
    , time(0)
    , Left_Turn_Indicator(0)
    , Left_Turn_Indicator_out_sign(0)
    , Right_Turn_Indicator(0)
    , Right_Turn_Indicator_out_sign(0)
    , Fog_Light(0)
    , Tail_Light(0)
    , Head_Light(0)
    , Up_Light(0)
    , Auto_Light(0)
    , Light_Status_out_sign(0)
    , Emergency_Light(0)
    , Emergency_Light_out_sign(0)
    , Wiper_Operation(0)
    , Wiper_Speed(0)
    , Rear_Wiper_Operation(0)
    , Rear_Wiper_Speed(0)
    , LDWS_Switch(0)
    , LDWS_Left_Warning(0)
    , LDWS_Right_Warning(0)
    , Brake_Switch(0)
    , Gear_Position(0)
    , Parking_Brake(0)
    , Startup_key_state(0)
    , Driver_Door_switch(0)
    , Passenger_Door_switch(0)
    , Rear_left_door_switch(0)
    , Rear_right_door_switch(0)
    , Eco_switch(0)
    , Driver_Seat_Belt(0)
    , Assistant_Seat_Belt(0)
    , Rear_Side_Warning(0)
    , Rear_Camera(0)
    , L_SPAS_Warning(0)
    , R_SPAS_Warning(0)
    , Brake_Pedal_Pressure(0)
    , Throttle_Position(0.0)
    , N_Steering_Angle(0.0)
    , N_Steering_Angle_velocity(0)
    , N_Speed1(0)
    , N_Speed2(0)
    , RPM(0.0)
    , Lateral_Acceleration(0)
    , Door_Lock(0)
    , Air_Conditioner_Operation_Driver(0)
    , Air_Conditioner_Operation_Assistant(0)
    , Parking_Assistance_System(0)  {
    }
  Niro_(const ContainerAllocator& _alloc)
    : niro_can_message_number(0)
    , msg_count(0)
    , msg_status(0)
    , tosec(0.0)
    , header(0)
    , time(0)
    , Left_Turn_Indicator(0)
    , Left_Turn_Indicator_out_sign(0)
    , Right_Turn_Indicator(0)
    , Right_Turn_Indicator_out_sign(0)
    , Fog_Light(0)
    , Tail_Light(0)
    , Head_Light(0)
    , Up_Light(0)
    , Auto_Light(0)
    , Light_Status_out_sign(0)
    , Emergency_Light(0)
    , Emergency_Light_out_sign(0)
    , Wiper_Operation(0)
    , Wiper_Speed(0)
    , Rear_Wiper_Operation(0)
    , Rear_Wiper_Speed(0)
    , LDWS_Switch(0)
    , LDWS_Left_Warning(0)
    , LDWS_Right_Warning(0)
    , Brake_Switch(0)
    , Gear_Position(0)
    , Parking_Brake(0)
    , Startup_key_state(0)
    , Driver_Door_switch(0)
    , Passenger_Door_switch(0)
    , Rear_left_door_switch(0)
    , Rear_right_door_switch(0)
    , Eco_switch(0)
    , Driver_Seat_Belt(0)
    , Assistant_Seat_Belt(0)
    , Rear_Side_Warning(0)
    , Rear_Camera(0)
    , L_SPAS_Warning(0)
    , R_SPAS_Warning(0)
    , Brake_Pedal_Pressure(0)
    , Throttle_Position(0.0)
    , N_Steering_Angle(0.0)
    , N_Steering_Angle_velocity(0)
    , N_Speed1(0)
    , N_Speed2(0)
    , RPM(0.0)
    , Lateral_Acceleration(0)
    , Door_Lock(0)
    , Air_Conditioner_Operation_Driver(0)
    , Air_Conditioner_Operation_Assistant(0)
    , Parking_Assistance_System(0)  {
  (void)_alloc;
    }



   typedef uint32_t _niro_can_message_number_type;
  _niro_can_message_number_type niro_can_message_number;

   typedef uint32_t _msg_count_type;
  _msg_count_type msg_count;

   typedef uint32_t _msg_status_type;
  _msg_status_type msg_status;

   typedef double _tosec_type;
  _tosec_type tosec;

   typedef uint32_t _header_type;
  _header_type header;

   typedef uint32_t _time_type;
  _time_type time;

   typedef uint32_t _Left_Turn_Indicator_type;
  _Left_Turn_Indicator_type Left_Turn_Indicator;

   typedef uint32_t _Left_Turn_Indicator_out_sign_type;
  _Left_Turn_Indicator_out_sign_type Left_Turn_Indicator_out_sign;

   typedef uint32_t _Right_Turn_Indicator_type;
  _Right_Turn_Indicator_type Right_Turn_Indicator;

   typedef uint32_t _Right_Turn_Indicator_out_sign_type;
  _Right_Turn_Indicator_out_sign_type Right_Turn_Indicator_out_sign;

   typedef uint32_t _Fog_Light_type;
  _Fog_Light_type Fog_Light;

   typedef uint32_t _Tail_Light_type;
  _Tail_Light_type Tail_Light;

   typedef uint32_t _Head_Light_type;
  _Head_Light_type Head_Light;

   typedef uint32_t _Up_Light_type;
  _Up_Light_type Up_Light;

   typedef uint32_t _Auto_Light_type;
  _Auto_Light_type Auto_Light;

   typedef uint32_t _Light_Status_out_sign_type;
  _Light_Status_out_sign_type Light_Status_out_sign;

   typedef uint32_t _Emergency_Light_type;
  _Emergency_Light_type Emergency_Light;

   typedef uint32_t _Emergency_Light_out_sign_type;
  _Emergency_Light_out_sign_type Emergency_Light_out_sign;

   typedef uint32_t _Wiper_Operation_type;
  _Wiper_Operation_type Wiper_Operation;

   typedef uint32_t _Wiper_Speed_type;
  _Wiper_Speed_type Wiper_Speed;

   typedef uint32_t _Rear_Wiper_Operation_type;
  _Rear_Wiper_Operation_type Rear_Wiper_Operation;

   typedef uint32_t _Rear_Wiper_Speed_type;
  _Rear_Wiper_Speed_type Rear_Wiper_Speed;

   typedef uint32_t _LDWS_Switch_type;
  _LDWS_Switch_type LDWS_Switch;

   typedef uint32_t _LDWS_Left_Warning_type;
  _LDWS_Left_Warning_type LDWS_Left_Warning;

   typedef uint32_t _LDWS_Right_Warning_type;
  _LDWS_Right_Warning_type LDWS_Right_Warning;

   typedef uint32_t _Brake_Switch_type;
  _Brake_Switch_type Brake_Switch;

   typedef uint32_t _Gear_Position_type;
  _Gear_Position_type Gear_Position;

   typedef uint32_t _Parking_Brake_type;
  _Parking_Brake_type Parking_Brake;

   typedef uint32_t _Startup_key_state_type;
  _Startup_key_state_type Startup_key_state;

   typedef uint32_t _Driver_Door_switch_type;
  _Driver_Door_switch_type Driver_Door_switch;

   typedef uint32_t _Passenger_Door_switch_type;
  _Passenger_Door_switch_type Passenger_Door_switch;

   typedef uint32_t _Rear_left_door_switch_type;
  _Rear_left_door_switch_type Rear_left_door_switch;

   typedef uint32_t _Rear_right_door_switch_type;
  _Rear_right_door_switch_type Rear_right_door_switch;

   typedef uint32_t _Eco_switch_type;
  _Eco_switch_type Eco_switch;

   typedef uint32_t _Driver_Seat_Belt_type;
  _Driver_Seat_Belt_type Driver_Seat_Belt;

   typedef uint32_t _Assistant_Seat_Belt_type;
  _Assistant_Seat_Belt_type Assistant_Seat_Belt;

   typedef uint32_t _Rear_Side_Warning_type;
  _Rear_Side_Warning_type Rear_Side_Warning;

   typedef uint32_t _Rear_Camera_type;
  _Rear_Camera_type Rear_Camera;

   typedef uint32_t _L_SPAS_Warning_type;
  _L_SPAS_Warning_type L_SPAS_Warning;

   typedef uint32_t _R_SPAS_Warning_type;
  _R_SPAS_Warning_type R_SPAS_Warning;

   typedef uint32_t _Brake_Pedal_Pressure_type;
  _Brake_Pedal_Pressure_type Brake_Pedal_Pressure;

   typedef double _Throttle_Position_type;
  _Throttle_Position_type Throttle_Position;

   typedef double _N_Steering_Angle_type;
  _N_Steering_Angle_type N_Steering_Angle;

   typedef uint32_t _N_Steering_Angle_velocity_type;
  _N_Steering_Angle_velocity_type N_Steering_Angle_velocity;

   typedef uint32_t _N_Speed1_type;
  _N_Speed1_type N_Speed1;

   typedef uint32_t _N_Speed2_type;
  _N_Speed2_type N_Speed2;

   typedef double _RPM_type;
  _RPM_type RPM;

   typedef uint32_t _Lateral_Acceleration_type;
  _Lateral_Acceleration_type Lateral_Acceleration;

   typedef uint32_t _Door_Lock_type;
  _Door_Lock_type Door_Lock;

   typedef uint32_t _Air_Conditioner_Operation_Driver_type;
  _Air_Conditioner_Operation_Driver_type Air_Conditioner_Operation_Driver;

   typedef uint32_t _Air_Conditioner_Operation_Assistant_type;
  _Air_Conditioner_Operation_Assistant_type Air_Conditioner_Operation_Assistant;

   typedef uint32_t _Parking_Assistance_System_type;
  _Parking_Assistance_System_type Parking_Assistance_System;





  typedef boost::shared_ptr< ::kaaican::Niro_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kaaican::Niro_<ContainerAllocator> const> ConstPtr;

}; // struct Niro_

typedef ::kaaican::Niro_<std::allocator<void> > Niro;

typedef boost::shared_ptr< ::kaaican::Niro > NiroPtr;
typedef boost::shared_ptr< ::kaaican::Niro const> NiroConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kaaican::Niro_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kaaican::Niro_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kaaican::Niro_<ContainerAllocator1> & lhs, const ::kaaican::Niro_<ContainerAllocator2> & rhs)
{
  return lhs.niro_can_message_number == rhs.niro_can_message_number &&
    lhs.msg_count == rhs.msg_count &&
    lhs.msg_status == rhs.msg_status &&
    lhs.tosec == rhs.tosec &&
    lhs.header == rhs.header &&
    lhs.time == rhs.time &&
    lhs.Left_Turn_Indicator == rhs.Left_Turn_Indicator &&
    lhs.Left_Turn_Indicator_out_sign == rhs.Left_Turn_Indicator_out_sign &&
    lhs.Right_Turn_Indicator == rhs.Right_Turn_Indicator &&
    lhs.Right_Turn_Indicator_out_sign == rhs.Right_Turn_Indicator_out_sign &&
    lhs.Fog_Light == rhs.Fog_Light &&
    lhs.Tail_Light == rhs.Tail_Light &&
    lhs.Head_Light == rhs.Head_Light &&
    lhs.Up_Light == rhs.Up_Light &&
    lhs.Auto_Light == rhs.Auto_Light &&
    lhs.Light_Status_out_sign == rhs.Light_Status_out_sign &&
    lhs.Emergency_Light == rhs.Emergency_Light &&
    lhs.Emergency_Light_out_sign == rhs.Emergency_Light_out_sign &&
    lhs.Wiper_Operation == rhs.Wiper_Operation &&
    lhs.Wiper_Speed == rhs.Wiper_Speed &&
    lhs.Rear_Wiper_Operation == rhs.Rear_Wiper_Operation &&
    lhs.Rear_Wiper_Speed == rhs.Rear_Wiper_Speed &&
    lhs.LDWS_Switch == rhs.LDWS_Switch &&
    lhs.LDWS_Left_Warning == rhs.LDWS_Left_Warning &&
    lhs.LDWS_Right_Warning == rhs.LDWS_Right_Warning &&
    lhs.Brake_Switch == rhs.Brake_Switch &&
    lhs.Gear_Position == rhs.Gear_Position &&
    lhs.Parking_Brake == rhs.Parking_Brake &&
    lhs.Startup_key_state == rhs.Startup_key_state &&
    lhs.Driver_Door_switch == rhs.Driver_Door_switch &&
    lhs.Passenger_Door_switch == rhs.Passenger_Door_switch &&
    lhs.Rear_left_door_switch == rhs.Rear_left_door_switch &&
    lhs.Rear_right_door_switch == rhs.Rear_right_door_switch &&
    lhs.Eco_switch == rhs.Eco_switch &&
    lhs.Driver_Seat_Belt == rhs.Driver_Seat_Belt &&
    lhs.Assistant_Seat_Belt == rhs.Assistant_Seat_Belt &&
    lhs.Rear_Side_Warning == rhs.Rear_Side_Warning &&
    lhs.Rear_Camera == rhs.Rear_Camera &&
    lhs.L_SPAS_Warning == rhs.L_SPAS_Warning &&
    lhs.R_SPAS_Warning == rhs.R_SPAS_Warning &&
    lhs.Brake_Pedal_Pressure == rhs.Brake_Pedal_Pressure &&
    lhs.Throttle_Position == rhs.Throttle_Position &&
    lhs.N_Steering_Angle == rhs.N_Steering_Angle &&
    lhs.N_Steering_Angle_velocity == rhs.N_Steering_Angle_velocity &&
    lhs.N_Speed1 == rhs.N_Speed1 &&
    lhs.N_Speed2 == rhs.N_Speed2 &&
    lhs.RPM == rhs.RPM &&
    lhs.Lateral_Acceleration == rhs.Lateral_Acceleration &&
    lhs.Door_Lock == rhs.Door_Lock &&
    lhs.Air_Conditioner_Operation_Driver == rhs.Air_Conditioner_Operation_Driver &&
    lhs.Air_Conditioner_Operation_Assistant == rhs.Air_Conditioner_Operation_Assistant &&
    lhs.Parking_Assistance_System == rhs.Parking_Assistance_System;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kaaican::Niro_<ContainerAllocator1> & lhs, const ::kaaican::Niro_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kaaican

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kaaican::Niro_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kaaican::Niro_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kaaican::Niro_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kaaican::Niro_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kaaican::Niro_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kaaican::Niro_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kaaican::Niro_<ContainerAllocator> >
{
  static const char* value()
  {
    return "759aa6753ba14870b02b75af0e303148";
  }

  static const char* value(const ::kaaican::Niro_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x759aa6753ba14870ULL;
  static const uint64_t static_value2 = 0xb02b75af0e303148ULL;
};

template<class ContainerAllocator>
struct DataType< ::kaaican::Niro_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kaaican/Niro";
  }

  static const char* value(const ::kaaican::Niro_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kaaican::Niro_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 niro_can_message_number\n"
"uint32 msg_count\n"
"uint32 msg_status\n"
"float64 tosec\n"
"uint32 header\n"
"uint32 time\n"
"uint32 Left_Turn_Indicator\n"
"uint32 Left_Turn_Indicator_out_sign\n"
"uint32 Right_Turn_Indicator\n"
"uint32 Right_Turn_Indicator_out_sign\n"
"uint32 Fog_Light\n"
"uint32 Tail_Light\n"
"uint32 Head_Light\n"
"uint32 Up_Light\n"
"uint32 Auto_Light\n"
"uint32 Light_Status_out_sign\n"
"uint32 Emergency_Light\n"
"uint32 Emergency_Light_out_sign\n"
"uint32 Wiper_Operation\n"
"uint32 Wiper_Speed\n"
"uint32 Rear_Wiper_Operation\n"
"uint32 Rear_Wiper_Speed\n"
"uint32 LDWS_Switch\n"
"uint32 LDWS_Left_Warning\n"
"uint32 LDWS_Right_Warning\n"
"uint32 Brake_Switch\n"
"uint32 Gear_Position\n"
"uint32 Parking_Brake\n"
"uint32 Startup_key_state\n"
"uint32 Driver_Door_switch\n"
"uint32 Passenger_Door_switch\n"
"uint32 Rear_left_door_switch\n"
"uint32 Rear_right_door_switch\n"
"uint32 Eco_switch\n"
"uint32 Driver_Seat_Belt\n"
"uint32 Assistant_Seat_Belt\n"
"uint32 Rear_Side_Warning\n"
"uint32 Rear_Camera\n"
"uint32 L_SPAS_Warning\n"
"uint32 R_SPAS_Warning\n"
"uint32 Brake_Pedal_Pressure\n"
"float64 Throttle_Position\n"
"float64 N_Steering_Angle\n"
"uint32 N_Steering_Angle_velocity\n"
"uint32 N_Speed1\n"
"uint32 N_Speed2\n"
"float64 RPM\n"
"uint32 Lateral_Acceleration\n"
"uint32 Door_Lock\n"
"uint32 Air_Conditioner_Operation_Driver\n"
"uint32 Air_Conditioner_Operation_Assistant\n"
"uint32 Parking_Assistance_System\n"
;
  }

  static const char* value(const ::kaaican::Niro_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kaaican::Niro_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.niro_can_message_number);
      stream.next(m.msg_count);
      stream.next(m.msg_status);
      stream.next(m.tosec);
      stream.next(m.header);
      stream.next(m.time);
      stream.next(m.Left_Turn_Indicator);
      stream.next(m.Left_Turn_Indicator_out_sign);
      stream.next(m.Right_Turn_Indicator);
      stream.next(m.Right_Turn_Indicator_out_sign);
      stream.next(m.Fog_Light);
      stream.next(m.Tail_Light);
      stream.next(m.Head_Light);
      stream.next(m.Up_Light);
      stream.next(m.Auto_Light);
      stream.next(m.Light_Status_out_sign);
      stream.next(m.Emergency_Light);
      stream.next(m.Emergency_Light_out_sign);
      stream.next(m.Wiper_Operation);
      stream.next(m.Wiper_Speed);
      stream.next(m.Rear_Wiper_Operation);
      stream.next(m.Rear_Wiper_Speed);
      stream.next(m.LDWS_Switch);
      stream.next(m.LDWS_Left_Warning);
      stream.next(m.LDWS_Right_Warning);
      stream.next(m.Brake_Switch);
      stream.next(m.Gear_Position);
      stream.next(m.Parking_Brake);
      stream.next(m.Startup_key_state);
      stream.next(m.Driver_Door_switch);
      stream.next(m.Passenger_Door_switch);
      stream.next(m.Rear_left_door_switch);
      stream.next(m.Rear_right_door_switch);
      stream.next(m.Eco_switch);
      stream.next(m.Driver_Seat_Belt);
      stream.next(m.Assistant_Seat_Belt);
      stream.next(m.Rear_Side_Warning);
      stream.next(m.Rear_Camera);
      stream.next(m.L_SPAS_Warning);
      stream.next(m.R_SPAS_Warning);
      stream.next(m.Brake_Pedal_Pressure);
      stream.next(m.Throttle_Position);
      stream.next(m.N_Steering_Angle);
      stream.next(m.N_Steering_Angle_velocity);
      stream.next(m.N_Speed1);
      stream.next(m.N_Speed2);
      stream.next(m.RPM);
      stream.next(m.Lateral_Acceleration);
      stream.next(m.Door_Lock);
      stream.next(m.Air_Conditioner_Operation_Driver);
      stream.next(m.Air_Conditioner_Operation_Assistant);
      stream.next(m.Parking_Assistance_System);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Niro_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kaaican::Niro_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kaaican::Niro_<ContainerAllocator>& v)
  {
    s << indent << "niro_can_message_number: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.niro_can_message_number);
    s << indent << "msg_count: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.msg_count);
    s << indent << "msg_status: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.msg_status);
    s << indent << "tosec: ";
    Printer<double>::stream(s, indent + "  ", v.tosec);
    s << indent << "header: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.header);
    s << indent << "time: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.time);
    s << indent << "Left_Turn_Indicator: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.Left_Turn_Indicator);
    s << indent << "Left_Turn_Indicator_out_sign: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.Left_Turn_Indicator_out_sign);
    s << indent << "Right_Turn_Indicator: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.Right_Turn_Indicator);
    s << indent << "Right_Turn_Indicator_out_sign: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.Right_Turn_Indicator_out_sign);
    s << indent << "Fog_Light: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.Fog_Light);
    s << indent << "Tail_Light: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.Tail_Light);
    s << indent << "Head_Light: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.Head_Light);
    s << indent << "Up_Light: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.Up_Light);
    s << indent << "Auto_Light: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.Auto_Light);
    s << indent << "Light_Status_out_sign: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.Light_Status_out_sign);
    s << indent << "Emergency_Light: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.Emergency_Light);
    s << indent << "Emergency_Light_out_sign: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.Emergency_Light_out_sign);
    s << indent << "Wiper_Operation: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.Wiper_Operation);
    s << indent << "Wiper_Speed: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.Wiper_Speed);
    s << indent << "Rear_Wiper_Operation: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.Rear_Wiper_Operation);
    s << indent << "Rear_Wiper_Speed: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.Rear_Wiper_Speed);
    s << indent << "LDWS_Switch: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.LDWS_Switch);
    s << indent << "LDWS_Left_Warning: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.LDWS_Left_Warning);
    s << indent << "LDWS_Right_Warning: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.LDWS_Right_Warning);
    s << indent << "Brake_Switch: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.Brake_Switch);
    s << indent << "Gear_Position: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.Gear_Position);
    s << indent << "Parking_Brake: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.Parking_Brake);
    s << indent << "Startup_key_state: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.Startup_key_state);
    s << indent << "Driver_Door_switch: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.Driver_Door_switch);
    s << indent << "Passenger_Door_switch: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.Passenger_Door_switch);
    s << indent << "Rear_left_door_switch: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.Rear_left_door_switch);
    s << indent << "Rear_right_door_switch: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.Rear_right_door_switch);
    s << indent << "Eco_switch: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.Eco_switch);
    s << indent << "Driver_Seat_Belt: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.Driver_Seat_Belt);
    s << indent << "Assistant_Seat_Belt: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.Assistant_Seat_Belt);
    s << indent << "Rear_Side_Warning: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.Rear_Side_Warning);
    s << indent << "Rear_Camera: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.Rear_Camera);
    s << indent << "L_SPAS_Warning: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.L_SPAS_Warning);
    s << indent << "R_SPAS_Warning: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.R_SPAS_Warning);
    s << indent << "Brake_Pedal_Pressure: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.Brake_Pedal_Pressure);
    s << indent << "Throttle_Position: ";
    Printer<double>::stream(s, indent + "  ", v.Throttle_Position);
    s << indent << "N_Steering_Angle: ";
    Printer<double>::stream(s, indent + "  ", v.N_Steering_Angle);
    s << indent << "N_Steering_Angle_velocity: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.N_Steering_Angle_velocity);
    s << indent << "N_Speed1: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.N_Speed1);
    s << indent << "N_Speed2: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.N_Speed2);
    s << indent << "RPM: ";
    Printer<double>::stream(s, indent + "  ", v.RPM);
    s << indent << "Lateral_Acceleration: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.Lateral_Acceleration);
    s << indent << "Door_Lock: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.Door_Lock);
    s << indent << "Air_Conditioner_Operation_Driver: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.Air_Conditioner_Operation_Driver);
    s << indent << "Air_Conditioner_Operation_Assistant: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.Air_Conditioner_Operation_Assistant);
    s << indent << "Parking_Assistance_System: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.Parking_Assistance_System);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KAAICAN_MESSAGE_NIRO_H
