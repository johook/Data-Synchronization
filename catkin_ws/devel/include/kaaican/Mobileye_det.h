// Generated by gencpp from file kaaican/Mobileye_det.msg
// DO NOT EDIT!


#ifndef KAAICAN_MESSAGE_MOBILEYE_DET_H
#define KAAICAN_MESSAGE_MOBILEYE_DET_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kaaican
{
template <class ContainerAllocator>
struct Mobileye_det_
{
  typedef Mobileye_det_<ContainerAllocator> Type;

  Mobileye_det_()
    : mobileye_can_message_test_number(0)
    , msg_count(0)
    , msg_status(0)
    , tosec(0.0)
    , distance_left_lane(0.0)
    , distance_right_lane(0.0)
    , o_id()
    , o_position_x()
    , o_position_y()
    , o_relative_velocity_x()
    , o_brake_light()
    , o_type()
    , o_status()
    , o_change()  {
      o_id.assign(0);

      o_position_x.assign(0.0);

      o_position_y.assign(0.0);

      o_relative_velocity_x.assign(0.0);

      o_brake_light.assign(0);

      o_type.assign(0);

      o_status.assign(0);

      o_change.assign(0);
  }
  Mobileye_det_(const ContainerAllocator& _alloc)
    : mobileye_can_message_test_number(0)
    , msg_count(0)
    , msg_status(0)
    , tosec(0.0)
    , distance_left_lane(0.0)
    , distance_right_lane(0.0)
    , o_id()
    , o_position_x()
    , o_position_y()
    , o_relative_velocity_x()
    , o_brake_light()
    , o_type()
    , o_status()
    , o_change()  {
  (void)_alloc;
      o_id.assign(0);

      o_position_x.assign(0.0);

      o_position_y.assign(0.0);

      o_relative_velocity_x.assign(0.0);

      o_brake_light.assign(0);

      o_type.assign(0);

      o_status.assign(0);

      o_change.assign(0);
  }



   typedef uint32_t _mobileye_can_message_test_number_type;
  _mobileye_can_message_test_number_type mobileye_can_message_test_number;

   typedef uint32_t _msg_count_type;
  _msg_count_type msg_count;

   typedef uint32_t _msg_status_type;
  _msg_status_type msg_status;

   typedef float _tosec_type;
  _tosec_type tosec;

   typedef float _distance_left_lane_type;
  _distance_left_lane_type distance_left_lane;

   typedef float _distance_right_lane_type;
  _distance_right_lane_type distance_right_lane;

   typedef boost::array<uint32_t, 5>  _o_id_type;
  _o_id_type o_id;

   typedef boost::array<float, 5>  _o_position_x_type;
  _o_position_x_type o_position_x;

   typedef boost::array<float, 5>  _o_position_y_type;
  _o_position_y_type o_position_y;

   typedef boost::array<float, 5>  _o_relative_velocity_x_type;
  _o_relative_velocity_x_type o_relative_velocity_x;

   typedef boost::array<uint32_t, 5>  _o_brake_light_type;
  _o_brake_light_type o_brake_light;

   typedef boost::array<uint32_t, 5>  _o_type_type;
  _o_type_type o_type;

   typedef boost::array<uint32_t, 5>  _o_status_type;
  _o_status_type o_status;

   typedef boost::array<uint32_t, 5>  _o_change_type;
  _o_change_type o_change;





  typedef boost::shared_ptr< ::kaaican::Mobileye_det_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kaaican::Mobileye_det_<ContainerAllocator> const> ConstPtr;

}; // struct Mobileye_det_

typedef ::kaaican::Mobileye_det_<std::allocator<void> > Mobileye_det;

typedef boost::shared_ptr< ::kaaican::Mobileye_det > Mobileye_detPtr;
typedef boost::shared_ptr< ::kaaican::Mobileye_det const> Mobileye_detConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kaaican::Mobileye_det_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kaaican::Mobileye_det_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kaaican::Mobileye_det_<ContainerAllocator1> & lhs, const ::kaaican::Mobileye_det_<ContainerAllocator2> & rhs)
{
  return lhs.mobileye_can_message_test_number == rhs.mobileye_can_message_test_number &&
    lhs.msg_count == rhs.msg_count &&
    lhs.msg_status == rhs.msg_status &&
    lhs.tosec == rhs.tosec &&
    lhs.distance_left_lane == rhs.distance_left_lane &&
    lhs.distance_right_lane == rhs.distance_right_lane &&
    lhs.o_id == rhs.o_id &&
    lhs.o_position_x == rhs.o_position_x &&
    lhs.o_position_y == rhs.o_position_y &&
    lhs.o_relative_velocity_x == rhs.o_relative_velocity_x &&
    lhs.o_brake_light == rhs.o_brake_light &&
    lhs.o_type == rhs.o_type &&
    lhs.o_status == rhs.o_status &&
    lhs.o_change == rhs.o_change;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kaaican::Mobileye_det_<ContainerAllocator1> & lhs, const ::kaaican::Mobileye_det_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kaaican

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kaaican::Mobileye_det_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kaaican::Mobileye_det_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kaaican::Mobileye_det_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kaaican::Mobileye_det_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kaaican::Mobileye_det_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kaaican::Mobileye_det_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kaaican::Mobileye_det_<ContainerAllocator> >
{
  static const char* value()
  {
    return "82b2ec87632a21902b6bc78eacc6fa90";
  }

  static const char* value(const ::kaaican::Mobileye_det_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x82b2ec87632a2190ULL;
  static const uint64_t static_value2 = 0x2b6bc78eacc6fa90ULL;
};

template<class ContainerAllocator>
struct DataType< ::kaaican::Mobileye_det_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kaaican/Mobileye_det";
  }

  static const char* value(const ::kaaican::Mobileye_det_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kaaican::Mobileye_det_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 mobileye_can_message_test_number\n"
"uint32 msg_count\n"
"uint32 msg_status\n"
"float32 tosec\n"
"float32 distance_left_lane\n"
"float32 distance_right_lane\n"
"uint32[5] o_id\n"
"float32[5] o_position_x\n"
"float32[5] o_position_y\n"
"float32[5] o_relative_velocity_x\n"
"uint32[5] o_brake_light\n"
"uint32[5] o_type\n"
"uint32[5] o_status\n"
"uint32[5] o_change\n"
;
  }

  static const char* value(const ::kaaican::Mobileye_det_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kaaican::Mobileye_det_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mobileye_can_message_test_number);
      stream.next(m.msg_count);
      stream.next(m.msg_status);
      stream.next(m.tosec);
      stream.next(m.distance_left_lane);
      stream.next(m.distance_right_lane);
      stream.next(m.o_id);
      stream.next(m.o_position_x);
      stream.next(m.o_position_y);
      stream.next(m.o_relative_velocity_x);
      stream.next(m.o_brake_light);
      stream.next(m.o_type);
      stream.next(m.o_status);
      stream.next(m.o_change);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Mobileye_det_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kaaican::Mobileye_det_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kaaican::Mobileye_det_<ContainerAllocator>& v)
  {
    s << indent << "mobileye_can_message_test_number: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.mobileye_can_message_test_number);
    s << indent << "msg_count: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.msg_count);
    s << indent << "msg_status: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.msg_status);
    s << indent << "tosec: ";
    Printer<float>::stream(s, indent + "  ", v.tosec);
    s << indent << "distance_left_lane: ";
    Printer<float>::stream(s, indent + "  ", v.distance_left_lane);
    s << indent << "distance_right_lane: ";
    Printer<float>::stream(s, indent + "  ", v.distance_right_lane);
    s << indent << "o_id[]" << std::endl;
    for (size_t i = 0; i < v.o_id.size(); ++i)
    {
      s << indent << "  o_id[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.o_id[i]);
    }
    s << indent << "o_position_x[]" << std::endl;
    for (size_t i = 0; i < v.o_position_x.size(); ++i)
    {
      s << indent << "  o_position_x[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.o_position_x[i]);
    }
    s << indent << "o_position_y[]" << std::endl;
    for (size_t i = 0; i < v.o_position_y.size(); ++i)
    {
      s << indent << "  o_position_y[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.o_position_y[i]);
    }
    s << indent << "o_relative_velocity_x[]" << std::endl;
    for (size_t i = 0; i < v.o_relative_velocity_x.size(); ++i)
    {
      s << indent << "  o_relative_velocity_x[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.o_relative_velocity_x[i]);
    }
    s << indent << "o_brake_light[]" << std::endl;
    for (size_t i = 0; i < v.o_brake_light.size(); ++i)
    {
      s << indent << "  o_brake_light[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.o_brake_light[i]);
    }
    s << indent << "o_type[]" << std::endl;
    for (size_t i = 0; i < v.o_type.size(); ++i)
    {
      s << indent << "  o_type[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.o_type[i]);
    }
    s << indent << "o_status[]" << std::endl;
    for (size_t i = 0; i < v.o_status.size(); ++i)
    {
      s << indent << "  o_status[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.o_status[i]);
    }
    s << indent << "o_change[]" << std::endl;
    for (size_t i = 0; i < v.o_change.size(); ++i)
    {
      s << indent << "  o_change[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.o_change[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // KAAICAN_MESSAGE_MOBILEYE_DET_H
