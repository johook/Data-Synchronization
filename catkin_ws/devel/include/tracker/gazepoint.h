// Generated by gencpp from file tracker/gazepoint.msg
// DO NOT EDIT!


#ifndef TRACKER_MESSAGE_GAZEPOINT_H
#define TRACKER_MESSAGE_GAZEPOINT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace tracker
{
template <class ContainerAllocator>
struct gazepoint_
{
  typedef gazepoint_<ContainerAllocator> Type;

  gazepoint_()
    : gaze_point_3d()
    , norm_pos()
    , calib_rotation(0.0)
    , label(0)  {
    }
  gazepoint_(const ContainerAllocator& _alloc)
    : gaze_point_3d(_alloc)
    , norm_pos(_alloc)
    , calib_rotation(0.0)
    , label(0)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _gaze_point_3d_type;
  _gaze_point_3d_type gaze_point_3d;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _norm_pos_type;
  _norm_pos_type norm_pos;

   typedef double _calib_rotation_type;
  _calib_rotation_type calib_rotation;

   typedef uint32_t _label_type;
  _label_type label;





  typedef boost::shared_ptr< ::tracker::gazepoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tracker::gazepoint_<ContainerAllocator> const> ConstPtr;

}; // struct gazepoint_

typedef ::tracker::gazepoint_<std::allocator<void> > gazepoint;

typedef boost::shared_ptr< ::tracker::gazepoint > gazepointPtr;
typedef boost::shared_ptr< ::tracker::gazepoint const> gazepointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tracker::gazepoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tracker::gazepoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tracker::gazepoint_<ContainerAllocator1> & lhs, const ::tracker::gazepoint_<ContainerAllocator2> & rhs)
{
  return lhs.gaze_point_3d == rhs.gaze_point_3d &&
    lhs.norm_pos == rhs.norm_pos &&
    lhs.calib_rotation == rhs.calib_rotation &&
    lhs.label == rhs.label;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tracker::gazepoint_<ContainerAllocator1> & lhs, const ::tracker::gazepoint_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tracker

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::tracker::gazepoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tracker::gazepoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tracker::gazepoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tracker::gazepoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tracker::gazepoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tracker::gazepoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tracker::gazepoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1e16063650569646887d2bce97f3d513";
  }

  static const char* value(const ::tracker::gazepoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1e16063650569646ULL;
  static const uint64_t static_value2 = 0x887d2bce97f3d513ULL;
};

template<class ContainerAllocator>
struct DataType< ::tracker::gazepoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tracker/gazepoint";
  }

  static const char* value(const ::tracker::gazepoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tracker::gazepoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point gaze_point_3d\n"
"geometry_msgs/Point norm_pos\n"
"float64 calib_rotation\n"
"uint32 label\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::tracker::gazepoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tracker::gazepoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.gaze_point_3d);
      stream.next(m.norm_pos);
      stream.next(m.calib_rotation);
      stream.next(m.label);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct gazepoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tracker::gazepoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tracker::gazepoint_<ContainerAllocator>& v)
  {
    s << indent << "gaze_point_3d: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.gaze_point_3d);
    s << indent << "norm_pos: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.norm_pos);
    s << indent << "calib_rotation: ";
    Printer<double>::stream(s, indent + "  ", v.calib_rotation);
    s << indent << "label: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.label);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TRACKER_MESSAGE_GAZEPOINT_H
