// Generated by gencpp from file tracker/GazePoint.msg
// DO NOT EDIT!


#ifndef TRACKER_MESSAGE_GAZEPOINT_H
#define TRACKER_MESSAGE_GAZEPOINT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <std_msgs/Header.h>

namespace tracker
{
template <class ContainerAllocator>
struct GazePoint_
{
  typedef GazePoint_<ContainerAllocator> Type;

  GazePoint_()
    : gaze_point_3d()
    , norm_pos()
    , gaze_normals_3d_left()
    , gaze_normals_3d_right()
    , eye_centers_3d_left()
    , eye_centers_3d_right()
    , pupil_confidence(0.0)
    , calib_rotation(0.0)
    , label(0)
    , header()  {
    }
  GazePoint_(const ContainerAllocator& _alloc)
    : gaze_point_3d(_alloc)
    , norm_pos(_alloc)
    , gaze_normals_3d_left(_alloc)
    , gaze_normals_3d_right(_alloc)
    , eye_centers_3d_left(_alloc)
    , eye_centers_3d_right(_alloc)
    , pupil_confidence(0.0)
    , calib_rotation(0.0)
    , label(0)
    , header(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _gaze_point_3d_type;
  _gaze_point_3d_type gaze_point_3d;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _norm_pos_type;
  _norm_pos_type norm_pos;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _gaze_normals_3d_left_type;
  _gaze_normals_3d_left_type gaze_normals_3d_left;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _gaze_normals_3d_right_type;
  _gaze_normals_3d_right_type gaze_normals_3d_right;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _eye_centers_3d_left_type;
  _eye_centers_3d_left_type eye_centers_3d_left;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _eye_centers_3d_right_type;
  _eye_centers_3d_right_type eye_centers_3d_right;

   typedef double _pupil_confidence_type;
  _pupil_confidence_type pupil_confidence;

   typedef double _calib_rotation_type;
  _calib_rotation_type calib_rotation;

   typedef uint32_t _label_type;
  _label_type label;

   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;





  typedef boost::shared_ptr< ::tracker::GazePoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tracker::GazePoint_<ContainerAllocator> const> ConstPtr;

}; // struct GazePoint_

typedef ::tracker::GazePoint_<std::allocator<void> > GazePoint;

typedef boost::shared_ptr< ::tracker::GazePoint > GazePointPtr;
typedef boost::shared_ptr< ::tracker::GazePoint const> GazePointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tracker::GazePoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tracker::GazePoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tracker::GazePoint_<ContainerAllocator1> & lhs, const ::tracker::GazePoint_<ContainerAllocator2> & rhs)
{
  return lhs.gaze_point_3d == rhs.gaze_point_3d &&
    lhs.norm_pos == rhs.norm_pos &&
    lhs.gaze_normals_3d_left == rhs.gaze_normals_3d_left &&
    lhs.gaze_normals_3d_right == rhs.gaze_normals_3d_right &&
    lhs.eye_centers_3d_left == rhs.eye_centers_3d_left &&
    lhs.eye_centers_3d_right == rhs.eye_centers_3d_right &&
    lhs.pupil_confidence == rhs.pupil_confidence &&
    lhs.calib_rotation == rhs.calib_rotation &&
    lhs.label == rhs.label &&
    lhs.header == rhs.header;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tracker::GazePoint_<ContainerAllocator1> & lhs, const ::tracker::GazePoint_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tracker

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::tracker::GazePoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tracker::GazePoint_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tracker::GazePoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tracker::GazePoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tracker::GazePoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tracker::GazePoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tracker::GazePoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2ceee7f8c243939ee5d566b251ad5e49";
  }

  static const char* value(const ::tracker::GazePoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2ceee7f8c243939eULL;
  static const uint64_t static_value2 = 0xe5d566b251ad5e49ULL;
};

template<class ContainerAllocator>
struct DataType< ::tracker::GazePoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tracker/GazePoint";
  }

  static const char* value(const ::tracker::GazePoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tracker::GazePoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point gaze_point_3d\n"
"geometry_msgs/Point norm_pos\n"
"geometry_msgs/Point gaze_normals_3d_left\n"
"geometry_msgs/Point gaze_normals_3d_right\n"
"geometry_msgs/Point eye_centers_3d_left\n"
"geometry_msgs/Point eye_centers_3d_right\n"
"float64 pupil_confidence\n"
"float64 calib_rotation\n"
"uint32 label\n"
"Header header\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::tracker::GazePoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tracker::GazePoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.gaze_point_3d);
      stream.next(m.norm_pos);
      stream.next(m.gaze_normals_3d_left);
      stream.next(m.gaze_normals_3d_right);
      stream.next(m.eye_centers_3d_left);
      stream.next(m.eye_centers_3d_right);
      stream.next(m.pupil_confidence);
      stream.next(m.calib_rotation);
      stream.next(m.label);
      stream.next(m.header);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GazePoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tracker::GazePoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tracker::GazePoint_<ContainerAllocator>& v)
  {
    s << indent << "gaze_point_3d: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.gaze_point_3d);
    s << indent << "norm_pos: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.norm_pos);
    s << indent << "gaze_normals_3d_left: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.gaze_normals_3d_left);
    s << indent << "gaze_normals_3d_right: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.gaze_normals_3d_right);
    s << indent << "eye_centers_3d_left: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.eye_centers_3d_left);
    s << indent << "eye_centers_3d_right: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.eye_centers_3d_right);
    s << indent << "pupil_confidence: ";
    Printer<double>::stream(s, indent + "  ", v.pupil_confidence);
    s << indent << "calib_rotation: ";
    Printer<double>::stream(s, indent + "  ", v.calib_rotation);
    s << indent << "label: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.label);
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TRACKER_MESSAGE_GAZEPOINT_H
