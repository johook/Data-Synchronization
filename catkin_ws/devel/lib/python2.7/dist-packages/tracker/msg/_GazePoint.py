# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tracker/GazePoint.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class GazePoint(genpy.Message):
  _md5sum = "2ceee7f8c243939ee5d566b251ad5e49"
  _type = "tracker/GazePoint"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """geometry_msgs/Point gaze_point_3d
geometry_msgs/Point norm_pos
geometry_msgs/Point gaze_normals_3d_left
geometry_msgs/Point gaze_normals_3d_right
geometry_msgs/Point eye_centers_3d_left
geometry_msgs/Point eye_centers_3d_right
float64 pupil_confidence
float64 calib_rotation
uint32 label
Header header

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['gaze_point_3d','norm_pos','gaze_normals_3d_left','gaze_normals_3d_right','eye_centers_3d_left','eye_centers_3d_right','pupil_confidence','calib_rotation','label','header']
  _slot_types = ['geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','float64','float64','uint32','std_msgs/Header']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       gaze_point_3d,norm_pos,gaze_normals_3d_left,gaze_normals_3d_right,eye_centers_3d_left,eye_centers_3d_right,pupil_confidence,calib_rotation,label,header

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GazePoint, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.gaze_point_3d is None:
        self.gaze_point_3d = geometry_msgs.msg.Point()
      if self.norm_pos is None:
        self.norm_pos = geometry_msgs.msg.Point()
      if self.gaze_normals_3d_left is None:
        self.gaze_normals_3d_left = geometry_msgs.msg.Point()
      if self.gaze_normals_3d_right is None:
        self.gaze_normals_3d_right = geometry_msgs.msg.Point()
      if self.eye_centers_3d_left is None:
        self.eye_centers_3d_left = geometry_msgs.msg.Point()
      if self.eye_centers_3d_right is None:
        self.eye_centers_3d_right = geometry_msgs.msg.Point()
      if self.pupil_confidence is None:
        self.pupil_confidence = 0.
      if self.calib_rotation is None:
        self.calib_rotation = 0.
      if self.label is None:
        self.label = 0
      if self.header is None:
        self.header = std_msgs.msg.Header()
    else:
      self.gaze_point_3d = geometry_msgs.msg.Point()
      self.norm_pos = geometry_msgs.msg.Point()
      self.gaze_normals_3d_left = geometry_msgs.msg.Point()
      self.gaze_normals_3d_right = geometry_msgs.msg.Point()
      self.eye_centers_3d_left = geometry_msgs.msg.Point()
      self.eye_centers_3d_right = geometry_msgs.msg.Point()
      self.pupil_confidence = 0.
      self.calib_rotation = 0.
      self.label = 0
      self.header = std_msgs.msg.Header()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_20d4I().pack(_x.gaze_point_3d.x, _x.gaze_point_3d.y, _x.gaze_point_3d.z, _x.norm_pos.x, _x.norm_pos.y, _x.norm_pos.z, _x.gaze_normals_3d_left.x, _x.gaze_normals_3d_left.y, _x.gaze_normals_3d_left.z, _x.gaze_normals_3d_right.x, _x.gaze_normals_3d_right.y, _x.gaze_normals_3d_right.z, _x.eye_centers_3d_left.x, _x.eye_centers_3d_left.y, _x.eye_centers_3d_left.z, _x.eye_centers_3d_right.x, _x.eye_centers_3d_right.y, _x.eye_centers_3d_right.z, _x.pupil_confidence, _x.calib_rotation, _x.label, _x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.gaze_point_3d is None:
        self.gaze_point_3d = geometry_msgs.msg.Point()
      if self.norm_pos is None:
        self.norm_pos = geometry_msgs.msg.Point()
      if self.gaze_normals_3d_left is None:
        self.gaze_normals_3d_left = geometry_msgs.msg.Point()
      if self.gaze_normals_3d_right is None:
        self.gaze_normals_3d_right = geometry_msgs.msg.Point()
      if self.eye_centers_3d_left is None:
        self.eye_centers_3d_left = geometry_msgs.msg.Point()
      if self.eye_centers_3d_right is None:
        self.eye_centers_3d_right = geometry_msgs.msg.Point()
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 176
      (_x.gaze_point_3d.x, _x.gaze_point_3d.y, _x.gaze_point_3d.z, _x.norm_pos.x, _x.norm_pos.y, _x.norm_pos.z, _x.gaze_normals_3d_left.x, _x.gaze_normals_3d_left.y, _x.gaze_normals_3d_left.z, _x.gaze_normals_3d_right.x, _x.gaze_normals_3d_right.y, _x.gaze_normals_3d_right.z, _x.eye_centers_3d_left.x, _x.eye_centers_3d_left.y, _x.eye_centers_3d_left.z, _x.eye_centers_3d_right.x, _x.eye_centers_3d_right.y, _x.eye_centers_3d_right.z, _x.pupil_confidence, _x.calib_rotation, _x.label, _x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_20d4I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_20d4I().pack(_x.gaze_point_3d.x, _x.gaze_point_3d.y, _x.gaze_point_3d.z, _x.norm_pos.x, _x.norm_pos.y, _x.norm_pos.z, _x.gaze_normals_3d_left.x, _x.gaze_normals_3d_left.y, _x.gaze_normals_3d_left.z, _x.gaze_normals_3d_right.x, _x.gaze_normals_3d_right.y, _x.gaze_normals_3d_right.z, _x.eye_centers_3d_left.x, _x.eye_centers_3d_left.y, _x.eye_centers_3d_left.z, _x.eye_centers_3d_right.x, _x.eye_centers_3d_right.y, _x.eye_centers_3d_right.z, _x.pupil_confidence, _x.calib_rotation, _x.label, _x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.gaze_point_3d is None:
        self.gaze_point_3d = geometry_msgs.msg.Point()
      if self.norm_pos is None:
        self.norm_pos = geometry_msgs.msg.Point()
      if self.gaze_normals_3d_left is None:
        self.gaze_normals_3d_left = geometry_msgs.msg.Point()
      if self.gaze_normals_3d_right is None:
        self.gaze_normals_3d_right = geometry_msgs.msg.Point()
      if self.eye_centers_3d_left is None:
        self.eye_centers_3d_left = geometry_msgs.msg.Point()
      if self.eye_centers_3d_right is None:
        self.eye_centers_3d_right = geometry_msgs.msg.Point()
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 176
      (_x.gaze_point_3d.x, _x.gaze_point_3d.y, _x.gaze_point_3d.z, _x.norm_pos.x, _x.norm_pos.y, _x.norm_pos.z, _x.gaze_normals_3d_left.x, _x.gaze_normals_3d_left.y, _x.gaze_normals_3d_left.z, _x.gaze_normals_3d_right.x, _x.gaze_normals_3d_right.y, _x.gaze_normals_3d_right.z, _x.eye_centers_3d_left.x, _x.eye_centers_3d_left.y, _x.eye_centers_3d_left.z, _x.eye_centers_3d_right.x, _x.eye_centers_3d_right.y, _x.eye_centers_3d_right.z, _x.pupil_confidence, _x.calib_rotation, _x.label, _x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_20d4I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_20d4I = None
def _get_struct_20d4I():
    global _struct_20d4I
    if _struct_20d4I is None:
        _struct_20d4I = struct.Struct("<20d4I")
    return _struct_20d4I
