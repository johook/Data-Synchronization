# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from kaaican/Mobileye_det.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Mobileye_det(genpy.Message):
  _md5sum = "82b2ec87632a21902b6bc78eacc6fa90"
  _type = "kaaican/Mobileye_det"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32 mobileye_can_message_test_number
uint32 msg_count
uint32 msg_status
float32 tosec
float32 distance_left_lane
float32 distance_right_lane
uint32[5] o_id
float32[5] o_position_x
float32[5] o_position_y
float32[5] o_relative_velocity_x
uint32[5] o_brake_light
uint32[5] o_type
uint32[5] o_status
uint32[5] o_change
"""
  __slots__ = ['mobileye_can_message_test_number','msg_count','msg_status','tosec','distance_left_lane','distance_right_lane','o_id','o_position_x','o_position_y','o_relative_velocity_x','o_brake_light','o_type','o_status','o_change']
  _slot_types = ['uint32','uint32','uint32','float32','float32','float32','uint32[5]','float32[5]','float32[5]','float32[5]','uint32[5]','uint32[5]','uint32[5]','uint32[5]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       mobileye_can_message_test_number,msg_count,msg_status,tosec,distance_left_lane,distance_right_lane,o_id,o_position_x,o_position_y,o_relative_velocity_x,o_brake_light,o_type,o_status,o_change

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Mobileye_det, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.mobileye_can_message_test_number is None:
        self.mobileye_can_message_test_number = 0
      if self.msg_count is None:
        self.msg_count = 0
      if self.msg_status is None:
        self.msg_status = 0
      if self.tosec is None:
        self.tosec = 0.
      if self.distance_left_lane is None:
        self.distance_left_lane = 0.
      if self.distance_right_lane is None:
        self.distance_right_lane = 0.
      if self.o_id is None:
        self.o_id = [0] * 5
      if self.o_position_x is None:
        self.o_position_x = [0.] * 5
      if self.o_position_y is None:
        self.o_position_y = [0.] * 5
      if self.o_relative_velocity_x is None:
        self.o_relative_velocity_x = [0.] * 5
      if self.o_brake_light is None:
        self.o_brake_light = [0] * 5
      if self.o_type is None:
        self.o_type = [0] * 5
      if self.o_status is None:
        self.o_status = [0] * 5
      if self.o_change is None:
        self.o_change = [0] * 5
    else:
      self.mobileye_can_message_test_number = 0
      self.msg_count = 0
      self.msg_status = 0
      self.tosec = 0.
      self.distance_left_lane = 0.
      self.distance_right_lane = 0.
      self.o_id = [0] * 5
      self.o_position_x = [0.] * 5
      self.o_position_y = [0.] * 5
      self.o_relative_velocity_x = [0.] * 5
      self.o_brake_light = [0] * 5
      self.o_type = [0] * 5
      self.o_status = [0] * 5
      self.o_change = [0] * 5

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I3f().pack(_x.mobileye_can_message_test_number, _x.msg_count, _x.msg_status, _x.tosec, _x.distance_left_lane, _x.distance_right_lane))
      buff.write(_get_struct_5I().pack(*self.o_id))
      buff.write(_get_struct_5f().pack(*self.o_position_x))
      buff.write(_get_struct_5f().pack(*self.o_position_y))
      buff.write(_get_struct_5f().pack(*self.o_relative_velocity_x))
      buff.write(_get_struct_5I().pack(*self.o_brake_light))
      buff.write(_get_struct_5I().pack(*self.o_type))
      buff.write(_get_struct_5I().pack(*self.o_status))
      buff.write(_get_struct_5I().pack(*self.o_change))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.mobileye_can_message_test_number, _x.msg_count, _x.msg_status, _x.tosec, _x.distance_left_lane, _x.distance_right_lane,) = _get_struct_3I3f().unpack(str[start:end])
      start = end
      end += 20
      self.o_id = _get_struct_5I().unpack(str[start:end])
      start = end
      end += 20
      self.o_position_x = _get_struct_5f().unpack(str[start:end])
      start = end
      end += 20
      self.o_position_y = _get_struct_5f().unpack(str[start:end])
      start = end
      end += 20
      self.o_relative_velocity_x = _get_struct_5f().unpack(str[start:end])
      start = end
      end += 20
      self.o_brake_light = _get_struct_5I().unpack(str[start:end])
      start = end
      end += 20
      self.o_type = _get_struct_5I().unpack(str[start:end])
      start = end
      end += 20
      self.o_status = _get_struct_5I().unpack(str[start:end])
      start = end
      end += 20
      self.o_change = _get_struct_5I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I3f().pack(_x.mobileye_can_message_test_number, _x.msg_count, _x.msg_status, _x.tosec, _x.distance_left_lane, _x.distance_right_lane))
      buff.write(self.o_id.tostring())
      buff.write(self.o_position_x.tostring())
      buff.write(self.o_position_y.tostring())
      buff.write(self.o_relative_velocity_x.tostring())
      buff.write(self.o_brake_light.tostring())
      buff.write(self.o_type.tostring())
      buff.write(self.o_status.tostring())
      buff.write(self.o_change.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.mobileye_can_message_test_number, _x.msg_count, _x.msg_status, _x.tosec, _x.distance_left_lane, _x.distance_right_lane,) = _get_struct_3I3f().unpack(str[start:end])
      start = end
      end += 20
      self.o_id = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=5)
      start = end
      end += 20
      self.o_position_x = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=5)
      start = end
      end += 20
      self.o_position_y = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=5)
      start = end
      end += 20
      self.o_relative_velocity_x = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=5)
      start = end
      end += 20
      self.o_brake_light = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=5)
      start = end
      end += 20
      self.o_type = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=5)
      start = end
      end += 20
      self.o_status = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=5)
      start = end
      end += 20
      self.o_change = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=5)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I3f = None
def _get_struct_3I3f():
    global _struct_3I3f
    if _struct_3I3f is None:
        _struct_3I3f = struct.Struct("<3I3f")
    return _struct_3I3f
_struct_5I = None
def _get_struct_5I():
    global _struct_5I
    if _struct_5I is None:
        _struct_5I = struct.Struct("<5I")
    return _struct_5I
_struct_5f = None
def _get_struct_5f():
    global _struct_5f
    if _struct_5f is None:
        _struct_5f = struct.Struct("<5f")
    return _struct_5f
