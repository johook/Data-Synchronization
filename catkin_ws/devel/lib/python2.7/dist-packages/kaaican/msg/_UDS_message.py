# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from kaaican/UDS_message.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class UDS_message(genpy.Message):
  _md5sum = "39f1bb4c2234cc4366a498f84a6e6abf"
  _type = "kaaican/UDS_message"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32 UDS_count
uint32 gap
uint32 OBD_RPM
uint32 OBD_speed
uint32 Vehicle_speed_1
uint32 Vehicle_speed_2
uint32 Accleartor_position
uint32 Driver_setting_target_speed
uint32 Distance_to_target
uint32 Relative_speed_to_target
uint32 Absolute_steering_angle
uint32 Steering_wheel_angle_sensor


"""
  __slots__ = ['UDS_count','gap','OBD_RPM','OBD_speed','Vehicle_speed_1','Vehicle_speed_2','Accleartor_position','Driver_setting_target_speed','Distance_to_target','Relative_speed_to_target','Absolute_steering_angle','Steering_wheel_angle_sensor']
  _slot_types = ['uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       UDS_count,gap,OBD_RPM,OBD_speed,Vehicle_speed_1,Vehicle_speed_2,Accleartor_position,Driver_setting_target_speed,Distance_to_target,Relative_speed_to_target,Absolute_steering_angle,Steering_wheel_angle_sensor

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(UDS_message, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.UDS_count is None:
        self.UDS_count = 0
      if self.gap is None:
        self.gap = 0
      if self.OBD_RPM is None:
        self.OBD_RPM = 0
      if self.OBD_speed is None:
        self.OBD_speed = 0
      if self.Vehicle_speed_1 is None:
        self.Vehicle_speed_1 = 0
      if self.Vehicle_speed_2 is None:
        self.Vehicle_speed_2 = 0
      if self.Accleartor_position is None:
        self.Accleartor_position = 0
      if self.Driver_setting_target_speed is None:
        self.Driver_setting_target_speed = 0
      if self.Distance_to_target is None:
        self.Distance_to_target = 0
      if self.Relative_speed_to_target is None:
        self.Relative_speed_to_target = 0
      if self.Absolute_steering_angle is None:
        self.Absolute_steering_angle = 0
      if self.Steering_wheel_angle_sensor is None:
        self.Steering_wheel_angle_sensor = 0
    else:
      self.UDS_count = 0
      self.gap = 0
      self.OBD_RPM = 0
      self.OBD_speed = 0
      self.Vehicle_speed_1 = 0
      self.Vehicle_speed_2 = 0
      self.Accleartor_position = 0
      self.Driver_setting_target_speed = 0
      self.Distance_to_target = 0
      self.Relative_speed_to_target = 0
      self.Absolute_steering_angle = 0
      self.Steering_wheel_angle_sensor = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_12I().pack(_x.UDS_count, _x.gap, _x.OBD_RPM, _x.OBD_speed, _x.Vehicle_speed_1, _x.Vehicle_speed_2, _x.Accleartor_position, _x.Driver_setting_target_speed, _x.Distance_to_target, _x.Relative_speed_to_target, _x.Absolute_steering_angle, _x.Steering_wheel_angle_sensor))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 48
      (_x.UDS_count, _x.gap, _x.OBD_RPM, _x.OBD_speed, _x.Vehicle_speed_1, _x.Vehicle_speed_2, _x.Accleartor_position, _x.Driver_setting_target_speed, _x.Distance_to_target, _x.Relative_speed_to_target, _x.Absolute_steering_angle, _x.Steering_wheel_angle_sensor,) = _get_struct_12I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_12I().pack(_x.UDS_count, _x.gap, _x.OBD_RPM, _x.OBD_speed, _x.Vehicle_speed_1, _x.Vehicle_speed_2, _x.Accleartor_position, _x.Driver_setting_target_speed, _x.Distance_to_target, _x.Relative_speed_to_target, _x.Absolute_steering_angle, _x.Steering_wheel_angle_sensor))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 48
      (_x.UDS_count, _x.gap, _x.OBD_RPM, _x.OBD_speed, _x.Vehicle_speed_1, _x.Vehicle_speed_2, _x.Accleartor_position, _x.Driver_setting_target_speed, _x.Distance_to_target, _x.Relative_speed_to_target, _x.Absolute_steering_angle, _x.Steering_wheel_angle_sensor,) = _get_struct_12I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_12I = None
def _get_struct_12I():
    global _struct_12I
    if _struct_12I is None:
        _struct_12I = struct.Struct("<12I")
    return _struct_12I
