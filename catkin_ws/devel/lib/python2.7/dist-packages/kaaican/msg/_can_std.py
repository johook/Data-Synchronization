# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from kaaican/can_std.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class can_std(genpy.Message):
  _md5sum = "56b1a1065dc0e7a8c6d3bae792605a9c"
  _type = "kaaican/can_std"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64 tosec
uint32 time
uint32 count
uint16 id
uint8 len
uint16[] data
uint16 status
uint16 aa
uint16 bb
uint16 cc
uint16 dd
uint16 ee
uint16 ff
uint16 gg
uint16 hh
uint16 ii
uint16 jj
uint16 kk
uint16 ll
uint16 mm
uint16 nn
uint16 oo
Header header


================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['tosec','time','count','id','len','data','status','aa','bb','cc','dd','ee','ff','gg','hh','ii','jj','kk','ll','mm','nn','oo','header']
  _slot_types = ['float64','uint32','uint32','uint16','uint8','uint16[]','uint16','uint16','uint16','uint16','uint16','uint16','uint16','uint16','uint16','uint16','uint16','uint16','uint16','uint16','uint16','uint16','std_msgs/Header']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       tosec,time,count,id,len,data,status,aa,bb,cc,dd,ee,ff,gg,hh,ii,jj,kk,ll,mm,nn,oo,header

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(can_std, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.tosec is None:
        self.tosec = 0.
      if self.time is None:
        self.time = 0
      if self.count is None:
        self.count = 0
      if self.id is None:
        self.id = 0
      if self.len is None:
        self.len = 0
      if self.data is None:
        self.data = []
      if self.status is None:
        self.status = 0
      if self.aa is None:
        self.aa = 0
      if self.bb is None:
        self.bb = 0
      if self.cc is None:
        self.cc = 0
      if self.dd is None:
        self.dd = 0
      if self.ee is None:
        self.ee = 0
      if self.ff is None:
        self.ff = 0
      if self.gg is None:
        self.gg = 0
      if self.hh is None:
        self.hh = 0
      if self.ii is None:
        self.ii = 0
      if self.jj is None:
        self.jj = 0
      if self.kk is None:
        self.kk = 0
      if self.ll is None:
        self.ll = 0
      if self.mm is None:
        self.mm = 0
      if self.nn is None:
        self.nn = 0
      if self.oo is None:
        self.oo = 0
      if self.header is None:
        self.header = std_msgs.msg.Header()
    else:
      self.tosec = 0.
      self.time = 0
      self.count = 0
      self.id = 0
      self.len = 0
      self.data = []
      self.status = 0
      self.aa = 0
      self.bb = 0
      self.cc = 0
      self.dd = 0
      self.ee = 0
      self.ff = 0
      self.gg = 0
      self.hh = 0
      self.ii = 0
      self.jj = 0
      self.kk = 0
      self.ll = 0
      self.mm = 0
      self.nn = 0
      self.oo = 0
      self.header = std_msgs.msg.Header()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_d2IHB().pack(_x.tosec, _x.time, _x.count, _x.id, _x.len))
      length = len(self.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(struct.Struct(pattern).pack(*self.data))
      _x = self
      buff.write(_get_struct_16H3I().pack(_x.status, _x.aa, _x.bb, _x.cc, _x.dd, _x.ee, _x.ff, _x.gg, _x.hh, _x.ii, _x.jj, _x.kk, _x.ll, _x.mm, _x.nn, _x.oo, _x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 19
      (_x.tosec, _x.time, _x.count, _x.id, _x.len,) = _get_struct_d2IHB().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.data = s.unpack(str[start:end])
      _x = self
      start = end
      end += 44
      (_x.status, _x.aa, _x.bb, _x.cc, _x.dd, _x.ee, _x.ff, _x.gg, _x.hh, _x.ii, _x.jj, _x.kk, _x.ll, _x.mm, _x.nn, _x.oo, _x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_16H3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_d2IHB().pack(_x.tosec, _x.time, _x.count, _x.id, _x.len))
      length = len(self.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(self.data.tostring())
      _x = self
      buff.write(_get_struct_16H3I().pack(_x.status, _x.aa, _x.bb, _x.cc, _x.dd, _x.ee, _x.ff, _x.gg, _x.hh, _x.ii, _x.jj, _x.kk, _x.ll, _x.mm, _x.nn, _x.oo, _x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 19
      (_x.tosec, _x.time, _x.count, _x.id, _x.len,) = _get_struct_d2IHB().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.data = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=length)
      _x = self
      start = end
      end += 44
      (_x.status, _x.aa, _x.bb, _x.cc, _x.dd, _x.ee, _x.ff, _x.gg, _x.hh, _x.ii, _x.jj, _x.kk, _x.ll, _x.mm, _x.nn, _x.oo, _x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_16H3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_16H3I = None
def _get_struct_16H3I():
    global _struct_16H3I
    if _struct_16H3I is None:
        _struct_16H3I = struct.Struct("<16H3I")
    return _struct_16H3I
_struct_d2IHB = None
def _get_struct_d2IHB():
    global _struct_d2IHB
    if _struct_d2IHB is None:
        _struct_d2IHB = struct.Struct("<d2IHB")
    return _struct_d2IHB
