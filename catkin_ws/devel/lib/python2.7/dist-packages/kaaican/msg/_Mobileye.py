# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from kaaican/Mobileye.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Mobileye(genpy.Message):
  _md5sum = "8118d0bbcb6f43a7ca947d83e64e932b"
  _type = "kaaican/Mobileye"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32 mobileye_can_message_number
uint32 msg_count
uint32 msg_status
float64 tosec
uint32 time
uint32 Con_Left
uint32 LDW_Left
uint32 Type_Left
float64 Dis_Left
uint32 Con_Right
uint32 LDW_Right
uint32 Type_Right
float64 Dis_Right
uint32 Head_Valid
float64 Head_Mea
uint32 LDW_OFF
uint32 LDW_Left_On
uint32 LDW_Right_On
uint32 FCW_On
uint32 Left_Crossing_Event
uint32 Right_Crossing_Event
uint32 P_FCW
uint32 P_DZ
uint32 TSR_En
uint32 TSR_W_Lv
uint32 Head_W_Lv
uint32 HW_R_En
uint32 Sign1
uint32 Sign2
uint32 Sign3
uint32 Sign4
uint32 S_Sign1
uint32 S_Sign2
uint32 S_Sign3
uint32 S_Sign4
uint32 HLB_dec
uint32 L_Beam
float64 L_Cur
float64 L_Head
uint32 Con_Area
uint32 R_LDW
uint32 L_LDW
float64 Yaw
float64 Pitch
uint32 Num_O
uint32 Timestamp
uint32 L_Close
uint32 R_Close
uint32 GO
uint32 Close_Car
uint32 L_Signal
uint32 R_Signal
uint32 Wiper
uint32 Lo_Beam
uint32 Hi_Beam
uint32 Speed
uint32 Sign_Type
uint32 S_Sign_Type
float64 Sign_X
float64 Sign_Y
float64 Sign_Z
uint32 Filter_Type
"""
  __slots__ = ['mobileye_can_message_number','msg_count','msg_status','tosec','time','Con_Left','LDW_Left','Type_Left','Dis_Left','Con_Right','LDW_Right','Type_Right','Dis_Right','Head_Valid','Head_Mea','LDW_OFF','LDW_Left_On','LDW_Right_On','FCW_On','Left_Crossing_Event','Right_Crossing_Event','P_FCW','P_DZ','TSR_En','TSR_W_Lv','Head_W_Lv','HW_R_En','Sign1','Sign2','Sign3','Sign4','S_Sign1','S_Sign2','S_Sign3','S_Sign4','HLB_dec','L_Beam','L_Cur','L_Head','Con_Area','R_LDW','L_LDW','Yaw','Pitch','Num_O','Timestamp','L_Close','R_Close','GO','Close_Car','L_Signal','R_Signal','Wiper','Lo_Beam','Hi_Beam','Speed','Sign_Type','S_Sign_Type','Sign_X','Sign_Y','Sign_Z','Filter_Type']
  _slot_types = ['uint32','uint32','uint32','float64','uint32','uint32','uint32','uint32','float64','uint32','uint32','uint32','float64','uint32','float64','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','float64','float64','uint32','uint32','uint32','float64','float64','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','float64','float64','float64','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       mobileye_can_message_number,msg_count,msg_status,tosec,time,Con_Left,LDW_Left,Type_Left,Dis_Left,Con_Right,LDW_Right,Type_Right,Dis_Right,Head_Valid,Head_Mea,LDW_OFF,LDW_Left_On,LDW_Right_On,FCW_On,Left_Crossing_Event,Right_Crossing_Event,P_FCW,P_DZ,TSR_En,TSR_W_Lv,Head_W_Lv,HW_R_En,Sign1,Sign2,Sign3,Sign4,S_Sign1,S_Sign2,S_Sign3,S_Sign4,HLB_dec,L_Beam,L_Cur,L_Head,Con_Area,R_LDW,L_LDW,Yaw,Pitch,Num_O,Timestamp,L_Close,R_Close,GO,Close_Car,L_Signal,R_Signal,Wiper,Lo_Beam,Hi_Beam,Speed,Sign_Type,S_Sign_Type,Sign_X,Sign_Y,Sign_Z,Filter_Type

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Mobileye, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.mobileye_can_message_number is None:
        self.mobileye_can_message_number = 0
      if self.msg_count is None:
        self.msg_count = 0
      if self.msg_status is None:
        self.msg_status = 0
      if self.tosec is None:
        self.tosec = 0.
      if self.time is None:
        self.time = 0
      if self.Con_Left is None:
        self.Con_Left = 0
      if self.LDW_Left is None:
        self.LDW_Left = 0
      if self.Type_Left is None:
        self.Type_Left = 0
      if self.Dis_Left is None:
        self.Dis_Left = 0.
      if self.Con_Right is None:
        self.Con_Right = 0
      if self.LDW_Right is None:
        self.LDW_Right = 0
      if self.Type_Right is None:
        self.Type_Right = 0
      if self.Dis_Right is None:
        self.Dis_Right = 0.
      if self.Head_Valid is None:
        self.Head_Valid = 0
      if self.Head_Mea is None:
        self.Head_Mea = 0.
      if self.LDW_OFF is None:
        self.LDW_OFF = 0
      if self.LDW_Left_On is None:
        self.LDW_Left_On = 0
      if self.LDW_Right_On is None:
        self.LDW_Right_On = 0
      if self.FCW_On is None:
        self.FCW_On = 0
      if self.Left_Crossing_Event is None:
        self.Left_Crossing_Event = 0
      if self.Right_Crossing_Event is None:
        self.Right_Crossing_Event = 0
      if self.P_FCW is None:
        self.P_FCW = 0
      if self.P_DZ is None:
        self.P_DZ = 0
      if self.TSR_En is None:
        self.TSR_En = 0
      if self.TSR_W_Lv is None:
        self.TSR_W_Lv = 0
      if self.Head_W_Lv is None:
        self.Head_W_Lv = 0
      if self.HW_R_En is None:
        self.HW_R_En = 0
      if self.Sign1 is None:
        self.Sign1 = 0
      if self.Sign2 is None:
        self.Sign2 = 0
      if self.Sign3 is None:
        self.Sign3 = 0
      if self.Sign4 is None:
        self.Sign4 = 0
      if self.S_Sign1 is None:
        self.S_Sign1 = 0
      if self.S_Sign2 is None:
        self.S_Sign2 = 0
      if self.S_Sign3 is None:
        self.S_Sign3 = 0
      if self.S_Sign4 is None:
        self.S_Sign4 = 0
      if self.HLB_dec is None:
        self.HLB_dec = 0
      if self.L_Beam is None:
        self.L_Beam = 0
      if self.L_Cur is None:
        self.L_Cur = 0.
      if self.L_Head is None:
        self.L_Head = 0.
      if self.Con_Area is None:
        self.Con_Area = 0
      if self.R_LDW is None:
        self.R_LDW = 0
      if self.L_LDW is None:
        self.L_LDW = 0
      if self.Yaw is None:
        self.Yaw = 0.
      if self.Pitch is None:
        self.Pitch = 0.
      if self.Num_O is None:
        self.Num_O = 0
      if self.Timestamp is None:
        self.Timestamp = 0
      if self.L_Close is None:
        self.L_Close = 0
      if self.R_Close is None:
        self.R_Close = 0
      if self.GO is None:
        self.GO = 0
      if self.Close_Car is None:
        self.Close_Car = 0
      if self.L_Signal is None:
        self.L_Signal = 0
      if self.R_Signal is None:
        self.R_Signal = 0
      if self.Wiper is None:
        self.Wiper = 0
      if self.Lo_Beam is None:
        self.Lo_Beam = 0
      if self.Hi_Beam is None:
        self.Hi_Beam = 0
      if self.Speed is None:
        self.Speed = 0
      if self.Sign_Type is None:
        self.Sign_Type = 0
      if self.S_Sign_Type is None:
        self.S_Sign_Type = 0
      if self.Sign_X is None:
        self.Sign_X = 0.
      if self.Sign_Y is None:
        self.Sign_Y = 0.
      if self.Sign_Z is None:
        self.Sign_Z = 0.
      if self.Filter_Type is None:
        self.Filter_Type = 0
    else:
      self.mobileye_can_message_number = 0
      self.msg_count = 0
      self.msg_status = 0
      self.tosec = 0.
      self.time = 0
      self.Con_Left = 0
      self.LDW_Left = 0
      self.Type_Left = 0
      self.Dis_Left = 0.
      self.Con_Right = 0
      self.LDW_Right = 0
      self.Type_Right = 0
      self.Dis_Right = 0.
      self.Head_Valid = 0
      self.Head_Mea = 0.
      self.LDW_OFF = 0
      self.LDW_Left_On = 0
      self.LDW_Right_On = 0
      self.FCW_On = 0
      self.Left_Crossing_Event = 0
      self.Right_Crossing_Event = 0
      self.P_FCW = 0
      self.P_DZ = 0
      self.TSR_En = 0
      self.TSR_W_Lv = 0
      self.Head_W_Lv = 0
      self.HW_R_En = 0
      self.Sign1 = 0
      self.Sign2 = 0
      self.Sign3 = 0
      self.Sign4 = 0
      self.S_Sign1 = 0
      self.S_Sign2 = 0
      self.S_Sign3 = 0
      self.S_Sign4 = 0
      self.HLB_dec = 0
      self.L_Beam = 0
      self.L_Cur = 0.
      self.L_Head = 0.
      self.Con_Area = 0
      self.R_LDW = 0
      self.L_LDW = 0
      self.Yaw = 0.
      self.Pitch = 0.
      self.Num_O = 0
      self.Timestamp = 0
      self.L_Close = 0
      self.R_Close = 0
      self.GO = 0
      self.Close_Car = 0
      self.L_Signal = 0
      self.R_Signal = 0
      self.Wiper = 0
      self.Lo_Beam = 0
      self.Hi_Beam = 0
      self.Speed = 0
      self.Sign_Type = 0
      self.S_Sign_Type = 0
      self.Sign_X = 0.
      self.Sign_Y = 0.
      self.Sign_Z = 0.
      self.Filter_Type = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3Id4Id3IdId22I2d3I2d14I3dI().pack(_x.mobileye_can_message_number, _x.msg_count, _x.msg_status, _x.tosec, _x.time, _x.Con_Left, _x.LDW_Left, _x.Type_Left, _x.Dis_Left, _x.Con_Right, _x.LDW_Right, _x.Type_Right, _x.Dis_Right, _x.Head_Valid, _x.Head_Mea, _x.LDW_OFF, _x.LDW_Left_On, _x.LDW_Right_On, _x.FCW_On, _x.Left_Crossing_Event, _x.Right_Crossing_Event, _x.P_FCW, _x.P_DZ, _x.TSR_En, _x.TSR_W_Lv, _x.Head_W_Lv, _x.HW_R_En, _x.Sign1, _x.Sign2, _x.Sign3, _x.Sign4, _x.S_Sign1, _x.S_Sign2, _x.S_Sign3, _x.S_Sign4, _x.HLB_dec, _x.L_Beam, _x.L_Cur, _x.L_Head, _x.Con_Area, _x.R_LDW, _x.L_LDW, _x.Yaw, _x.Pitch, _x.Num_O, _x.Timestamp, _x.L_Close, _x.R_Close, _x.GO, _x.Close_Car, _x.L_Signal, _x.R_Signal, _x.Wiper, _x.Lo_Beam, _x.Hi_Beam, _x.Speed, _x.Sign_Type, _x.S_Sign_Type, _x.Sign_X, _x.Sign_Y, _x.Sign_Z, _x.Filter_Type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 292
      (_x.mobileye_can_message_number, _x.msg_count, _x.msg_status, _x.tosec, _x.time, _x.Con_Left, _x.LDW_Left, _x.Type_Left, _x.Dis_Left, _x.Con_Right, _x.LDW_Right, _x.Type_Right, _x.Dis_Right, _x.Head_Valid, _x.Head_Mea, _x.LDW_OFF, _x.LDW_Left_On, _x.LDW_Right_On, _x.FCW_On, _x.Left_Crossing_Event, _x.Right_Crossing_Event, _x.P_FCW, _x.P_DZ, _x.TSR_En, _x.TSR_W_Lv, _x.Head_W_Lv, _x.HW_R_En, _x.Sign1, _x.Sign2, _x.Sign3, _x.Sign4, _x.S_Sign1, _x.S_Sign2, _x.S_Sign3, _x.S_Sign4, _x.HLB_dec, _x.L_Beam, _x.L_Cur, _x.L_Head, _x.Con_Area, _x.R_LDW, _x.L_LDW, _x.Yaw, _x.Pitch, _x.Num_O, _x.Timestamp, _x.L_Close, _x.R_Close, _x.GO, _x.Close_Car, _x.L_Signal, _x.R_Signal, _x.Wiper, _x.Lo_Beam, _x.Hi_Beam, _x.Speed, _x.Sign_Type, _x.S_Sign_Type, _x.Sign_X, _x.Sign_Y, _x.Sign_Z, _x.Filter_Type,) = _get_struct_3Id4Id3IdId22I2d3I2d14I3dI().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3Id4Id3IdId22I2d3I2d14I3dI().pack(_x.mobileye_can_message_number, _x.msg_count, _x.msg_status, _x.tosec, _x.time, _x.Con_Left, _x.LDW_Left, _x.Type_Left, _x.Dis_Left, _x.Con_Right, _x.LDW_Right, _x.Type_Right, _x.Dis_Right, _x.Head_Valid, _x.Head_Mea, _x.LDW_OFF, _x.LDW_Left_On, _x.LDW_Right_On, _x.FCW_On, _x.Left_Crossing_Event, _x.Right_Crossing_Event, _x.P_FCW, _x.P_DZ, _x.TSR_En, _x.TSR_W_Lv, _x.Head_W_Lv, _x.HW_R_En, _x.Sign1, _x.Sign2, _x.Sign3, _x.Sign4, _x.S_Sign1, _x.S_Sign2, _x.S_Sign3, _x.S_Sign4, _x.HLB_dec, _x.L_Beam, _x.L_Cur, _x.L_Head, _x.Con_Area, _x.R_LDW, _x.L_LDW, _x.Yaw, _x.Pitch, _x.Num_O, _x.Timestamp, _x.L_Close, _x.R_Close, _x.GO, _x.Close_Car, _x.L_Signal, _x.R_Signal, _x.Wiper, _x.Lo_Beam, _x.Hi_Beam, _x.Speed, _x.Sign_Type, _x.S_Sign_Type, _x.Sign_X, _x.Sign_Y, _x.Sign_Z, _x.Filter_Type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 292
      (_x.mobileye_can_message_number, _x.msg_count, _x.msg_status, _x.tosec, _x.time, _x.Con_Left, _x.LDW_Left, _x.Type_Left, _x.Dis_Left, _x.Con_Right, _x.LDW_Right, _x.Type_Right, _x.Dis_Right, _x.Head_Valid, _x.Head_Mea, _x.LDW_OFF, _x.LDW_Left_On, _x.LDW_Right_On, _x.FCW_On, _x.Left_Crossing_Event, _x.Right_Crossing_Event, _x.P_FCW, _x.P_DZ, _x.TSR_En, _x.TSR_W_Lv, _x.Head_W_Lv, _x.HW_R_En, _x.Sign1, _x.Sign2, _x.Sign3, _x.Sign4, _x.S_Sign1, _x.S_Sign2, _x.S_Sign3, _x.S_Sign4, _x.HLB_dec, _x.L_Beam, _x.L_Cur, _x.L_Head, _x.Con_Area, _x.R_LDW, _x.L_LDW, _x.Yaw, _x.Pitch, _x.Num_O, _x.Timestamp, _x.L_Close, _x.R_Close, _x.GO, _x.Close_Car, _x.L_Signal, _x.R_Signal, _x.Wiper, _x.Lo_Beam, _x.Hi_Beam, _x.Speed, _x.Sign_Type, _x.S_Sign_Type, _x.Sign_X, _x.Sign_Y, _x.Sign_Z, _x.Filter_Type,) = _get_struct_3Id4Id3IdId22I2d3I2d14I3dI().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3Id4Id3IdId22I2d3I2d14I3dI = None
def _get_struct_3Id4Id3IdId22I2d3I2d14I3dI():
    global _struct_3Id4Id3IdId22I2d3I2d14I3dI
    if _struct_3Id4Id3IdId22I2d3I2d14I3dI is None:
        _struct_3Id4Id3IdId22I2d3I2d14I3dI = struct.Struct("<3Id4Id3IdId22I2d3I2d14I3dI")
    return _struct_3Id4Id3IdId22I2d3I2d14I3dI
